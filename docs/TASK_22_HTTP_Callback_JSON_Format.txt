"task": {
	// optional
	"label"="My HTTP Callback",

	// mandatory
	"type": "HTTP-Callback",

	"parameters": {
		// mandatory
		"references": [
			// mandatory. One or more Reference needed to identify the videos (mediaItemKeys) or
			// the profiles (physicalPathKey) to be notified through the HTTP Callback.
			// In case this task is placed inside an onSuccess event, 
			// the Reference... item can be omitted.
			// In such a case, the System will automatically add the Reference... item using the key
			// of the video or the profile by which this task depend on.
			// As reference can be used "mediaItemKey", "uniqueName" or 
			// "physicalPathKey".
			// In case this task depend on one or more tasks generating videos, the videos will be 
			// uploaded.
			// In case this task depend on one or more tasks generating profiles (i.e. Encode Task),
			// the profiles will be uploaded.

			// The below object could contain optionally:
			// - encodingProfileKey or encodingProfileLabel to specify
			//		a specific profile
			// - stopIfReferenceProcessingError in case of multiple References,
			//		this boolean field specifies if the MMS has to continue or not
			//		in case of an error during the processing. Default is false
			// - mediaItemTitle, optional

			{ "mediaItemKey": 11 }
		],

		// Optional. This tag is used in the scenario where it is needed to call the callback for both
		//	the media inherited by the parent Task and the media specified by the References tag
		//	In this scenario this tag has to be set
		//  Options: "Beginning", "End", an integer specifying the position where
		//		the dependencies have to be placed. 0 is same as Beginning
		"dependenciesToBeAddedToReferencesAt": "End",

		// We have two options:
		//
		// - option 1 (addMediaData is true): HTTP callback shall send the media data received as input
		//		MMS will execute one HTTP request for each media received as input
		//
		//		In case of HTTP POST or PUT having the 'httpBody' field initialized,
		//			each HTTP request contains the 'httpBody' field where it was replaced, if exist,
		//			the following placeholders:
		//			- ${mediaItemKey} is replaced with the mediaItemKey of the current media
		//			- ${physicalPathKey} is replaced with the physicalPathKey of the current media
		//		otherwise, in case of POST or PUT (no 'httpBody' field initialized)
		//			the following json will be used as 'body':
		//			{
		//				"workspaceKey": <workspaceKey>,
		//				"mediaItemKey": <mediaItemKey>,
		//				"title": <title>,
		//				"userData": <userData>,
		//				"physicalPathKey": <physicalPathKey",
		//				"fileName", <fileName>,
		//				"durationInSeconds": <durationInSeconds>,
		//			}
		//		in all the other cases just one HTTP request is executed without any body
		//
		// - option 2 (addMediaData is false): one HTTP callback shall be executed without considering the received input
		//
		// Optional. Default is true
		"addMediaData": true,

		// optional. Username used for the HTTP basic authentication
		"userName": "xxx",

		// optional. password used for the HTTP basic authentication
		"password": "xxx",

		// optional. Default: http, it could be http or https
		"protocol": "http",

		// mandatory
		"hostName": "hostname",

		// optional. Default: 80 for http and 443 for https
		"port": 80,

		// mandatory
		"uri": "/path/.../name",

		// optional
		"parameters": "?name1=value&name2=value",

		// optional, this parameter specifies if the data have to be sent using the 'HTTP form' format
		//	In this case the name/value fields of the 'HTTP form' will be retrieved by the 'httpBody' field.
		//	Infact, it is expected that the 'httpBody' field is a json array of json object each one
		//	shall have the 'name' and 'value' fields. I.e.:
		//	[
		//		{"name": "<name of the first param>", "value": <value of the first param>" },
		//		{"name": "<name of the second param>", "value": <value of the second param>" },
		//		...
		//  ]
		//	This 'formData' parameter is used only in case of POST or PUT.
		// Default is false
		"formData": false,

		// optional. Default is POST. It could be GET, POST, PUT
		"method": "POST",

		// optional, in case of POST/PUT, if this field is initialized, it will be used
		//	as body of the POST/PUT. Otherwise it will be used a json containing
		//	the metadata of the inherit contents
		"httpBody": "",

		// optional, headers semicolon separated
		"headers": "",
		
		// optional, set maximum time in seconds the request is allowed to take, default is 120 seconds
		"timeout": 120,

		// optional. Default: 2
		"maxRetries": 2,

		// optional. Sinc ethis task do not generate any media as output, this parameter specifies if the input medias received by this task have to be forwarded to the next task
		// Default: false
		"forwardInputMedia": false,

		// optional: If present, it specifies when the Task has to be executed. The processing of the task
		//		can be delayed respect to the specified date based on his dependencies with other tasks.
		//		The date format is:
		//       - Zulu/UTC Date-time having the following format: YYYY-MM-DDTHH:MI:SSZ
		//	If it is not present, by default it will be initialized with the ingesion time
		"processingStartingFrom": "2019-01-21T12:30:00Z",

		// optional: It is used in case this Task has to wait a Task of another Workflow
		"waitFor": [
			{
				"globalIngestionLabel": "XXXX"
			}
		]
	}
}
